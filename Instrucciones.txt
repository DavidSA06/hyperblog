GIT

alias nombre="instruccion": Abreviar una instruccion.

Ctrl + shift + R: Fuerza el refrescar de página para ver los binarios modificados.

gitk: Abre una ventana con una interfaz gráfica para ver las ramas de manera gráfica.

git add file: Añade un archivo al stage, se hace después de hacer modificaciones, antes del commit.
git add .: Añade todos los archivos de la carpeta.

git blame archivo: Ver quien ha cambiado las líneas de un archivo.
git blame -c archivo: Ver una mejor identación.
git blame archivo -lrenglón,renglón: Ver quien modificó los renglones de un archivo.

git branch: Revisar que ramas existen y cual es la actual.
git branch nombre: Crear rama.
git branch -D nombre: Borrar rama.
git branch -r: Ver ramas remotas.
git branch -a: Ver todas las ramas.

git checkout hash file: Podremos ver el archivo en la versión del indicador.
git checkout master file: Podremos ver el archivo en la versión del master.
git checkout "nombre de rama": Cambiar de rama.

git cherry-pick hash: Trae un commit cualquiera de otra rama y lo une automáticamente.

git clean --dry-run: Simular lo que se va a borrar, sin borrar.
git clean -f: borra los archivos, menos las carpetas y gitignore.

git clone URL: Clona el repositorio remoto.

git commit -m "mensaje": Mandar al repositorio, junto con un mensaje.
git commit -am "mensaje": Mandar al repositorio sin hacer add, junto con un mensaje.
git commit --amend: Agrega los cambios al último commit (hay que hacer un add a los archivos modificados primero).

git config: Ver la lista de las configuraciones de git.
git config --global user.name "nombre": Cambiar la configuración sobre tu nombre.
git config --global user.email "correo": Cambiar la configuración sobre tu correo.
git config --global init.defaultBranch main: Cambiar rama principal a main por defecto.
git config --global alias.abreviación "instrucción" : Hacer una nueva instrucción abreviada permanente.

git diff: Ver diferencias actuales.
git diff hash hash: Ver diferencias entre diferentes versiones.

git grep palabra: Muestra cuantas veces aparece una palabra y en donde.
git grep -n palabra: Muestra el renglón en el que aparece la palabra.
git grep -c palabra: Muestra el numero de apariciones de la palabra en cada archivo.
git grep -c "<p>": Muestra el número de apariciones de la etiqueta <p>.

git init: Prepara la carpeta para git.

git --list: La configuración del git.
git --list --show-origin: Mostrar donde estan las configuraciones guardadas.

git log: Ver el historial de cambios.
git log file: Ver el historial de cambios de un archivo.
git log file --stat: Ver los cambios específicos en los archivos.
git log --all: Ver todo el historial de cambios.
git log --all --graph: Ver todo el historial de cambios graficado con ramas.
git log --all --graph --decorate --oneline: Ver todo el historial de cambios graficado con ramas en una sola linea.
git log -S "palabra": Muestra todas las veces que aparece una palabra en un commit.

<<<<<<< HEAD
alias nombre="instruccion": Abreviar una instruccion.

git show: Mostrar el ultimo cambio.
git show file: Mostrar los cambios.
git show-ref --tags: Mostrar los hashes junto a los tags.
git show-branch: Ver ramas existentes y su historia.
git show-branch --all: Ver ramas existentes con un poco más de datos.

git diff: Ver diferencias actuales.
git diff hash hash: Ver diferencias entre diferentes versiones.
=======
git pull origin main: Traer el repositorio remoto.
git pull origin main --allow-unrelated-histories: Trae el repositorio remoto auqnue haya hisotrias no relacionadas (archivos sobrantes).
>>>>>>> e4f565603f25d61e85c25271bcb1e5a0eb8b248d

git push origin main: Enviar al repositorio remoto los cambios.
git push origin --tags: Enviar al repositorio remoto los tags.
git push origin :refs/tags/nombre: Comando interno de github que borra el tag.

git rebase rama: reescribe la historia (primero desde la rama experimental y al final desde main).

git reflog: lista TODO, incluso lo borrado.

git remote add origin dirección: Enlazar un repositorio remoto.
git remote: revisar repositorios remotos.
git remote -v: revisar repositorios remotos de manera verbal.

git reset hash --hard: TODO vuelve a una versión anterior. (Ver nota).
git reset hash --soft: El directorio de trabajo vuelve a la versión anterior pero el staging sigue intacto.

git rm file: Nada si el archivo esta en el stage. (Ver nota).
git rm --cached file: Borrar el archivo de la memoria RAM, del stage.

git shortlog: Muestra los commits de cada persona.
git shortlog -sn: Sólo muestra las personas que han hecho commits y el número de los que han hecho.
git shortlog -sn -all: Muestra todos los commits, incluso los borrados.
git shortlog -sn -all --no-merges: Muestra todos los commits sin tomar en cuenta los merges.

git stash: guardar cambios temporales no listos para un commit, dejando todo como estaba en el ultimo commit.
git stash list: Ver lo guardado en un stash.
git stash pop: Regresar a los cambios hechos en el stash.
git stash (nueva)rama: Mover las modificaciones al stash de otra rama.
git stash drop: borrar los cambios en el stash.

git status: Ver el estado del proyecto.

git show: Mostrar el ultimo cambio.
git show file: Mostrar los cambios.
git show-ref --tags: Mostrar los hashes junto a los tags.
git show-branch: Ver ramas existentes y su historia.
git show-branch -all: Ver ramas existentes con un poco más de datos.

git tag: Ver tags existentes.
git tag -a v0.1 -m "mensaje" hash: Colocar una nueva etiqueta (-add).
git tag -d nombre: Borrar tag (-delete).


SSH

Generar una llave SSH
ssh-keygen -t:(t, especificar algoritmo rsa; b, complejidad de la llave; C, correo).
ssh-keygen -t rsa -b 4096 -C "ejemplo@correo.com"

eval $(ssh-agent -s): evaluar que el comando se dispare, comprobar el funcionamiento.

ssh-copy-id correo: copiar la clave pública.

git remote set-url origin enlace de repositorio: Cambiar la url/


Nota:

Git reset y git rm son comandos con utilidades muy diferentes, pero aún así 
se confunden muy fácilmente.
git rm

Este comando nos ayuda a eliminar archivos de Git sin eliminar su historial 
del sistema de versiones. Esto quiere decir que si necesitamos recuperar el 
archivo solo debemos “viajar en el tiempo” y recuperar el último commit antes 
de borrar el archivo en cuestión.

Recuerda que git rm no puede usarse así nomás. Debemos usar uno de los flags 
para indicarle a Git cómo eliminar los archivos que ya no necesitamos en la 
última versión del proyecto:

    git rm --cached: Elimina los archivos del área de Staging y del próximo 
commit pero los mantiene en nuestro disco duro.
    git rm --force: Elimina los archivos de Git y del disco duro. Git siempre 
guarda todo, por lo que podemos acceder al registro de la existencia de los 
archivos, de modo que podremos recuperarlos si es necesario (pero debemos usar 
comandos más avanzados).

git reset

Este comando nos ayuda a volver en el tiempo. Pero no como git checkout que nos 
deja ir, mirar, pasear y volver. Con git reset volvemos al pasado sin la 
posibilidad de volver al futuro. Borramos la historia y la debemos sobreescribir. No hay vuelta atrás.

Este comando es muy peligroso y debemos usarlo solo en caso de emergencia. 
Recuerda que debemos usar alguna de estas dos opciones:

Hay dos formas de usar git reset: con el argumento --hard, borrando toda 
la información que tengamos en el área de staging (y perdiendo todo para 
siempre). O, un poco más seguro, con el argumento --soft, que mantiene allí los 
archivos del área de staging para que podamos aplicar nuestros últimos cambios 
pero desde un commit anterior.

    git reset --soft: Borramos todo el historial y los registros de Git pero 
guardamos los cambios que tengamos en Staging, así podemos aplicar las últimas 
actualizaciones a un nuevo commit.
    git reset --hard: Borra todo. Todo todito, absolutamente todo. Toda la 
información de los commits y del área de staging se borra del historial.

¡Pero todavía falta algo!

    git reset HEAD: Este es el comando para sacar archivos del área de Staging. 
No para borrarlos ni nada de eso, solo para que los últimos cambios de estos 
archivos no se envíen al último commit, a menos que cambiemos de opinión y los 
incluyamos de nuevo en staging con git add, por supuesto.

¿Por qué esto es importante?

Imagina el siguiente caso:

Hacemos cambios en los archivos de un proyecto para una nueva actualización. 
Todos los archivos con cambios se mueven al área de staging con el comando 
git add. Pero te das cuenta de que uno de esos archivos no está listo todavía. 
Actualizaste el archivo pero ese cambio no debe ir en el próximo commit por 
ahora.

¿Qué podemos hacer?

Bueno, todos los cambios están en el área de Staging, incluido el archivo con 
los cambios que no están listos. Esto significa que debemos sacar ese archivo 
de Staging para poder hacer commit de todos los demás.

¡Al usar git rm lo que haremos será eliminar este archivo completamente de git! 
Todavía tendremos el historial de cambios de este archivo, con la eliminación 
del archivo como su última actualización. Recuerda que en este caso no 
buscábamos eliminar un archivo, solo dejarlo como estaba y actualizarlo 
después, no en este commit.

En cambio, si usamos git reset HEAD, lo único que haremos será mover estos 
cambios de Staging a Unstaged. Seguiremos teniendo los últimos cambios del 
archivo, el repositorio mantendrá el archivo (no con sus últimos cambios pero 
sí con los últimos en los que hicimos commit) y no habremos perdido nada.

Conclusión: Lo mejor que puedes hacer para salvar tu puesto y evitar un 
incendio en tu trabajo es conocer muy bien la diferencia y los riesgos de 
todos los comandos de Git.
